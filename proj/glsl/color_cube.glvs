#version 150

in vec4 position;
in vec3 normal;
in vec2 texcoord; 
in vec3 color;

out vec3 p_eye;
out vec3 n_eye;
out vec3 col;
out vec2 tc;

//***** begin interface of view.glsl ***********************************
mat4 get_modelview_matrix();
mat4 get_projection_matrix();
mat4 get_modelview_projection_matrix();
mat4 get_inverse_modelview_matrix();
mat4 get_inverse_modelview_projection_matrix();
mat3 get_normal_matrix();
mat3 get_inverse_normal_matrix();
//***** end interface of view.glsl ***********************************

float ot = 1.0f / 3;
float tt = 2.0f / 3;
float T[14 * 2] = float[](
	0.5f,0 , 0.5f,ot ,
	0.5f,tt , 0.5f,1 ,
	0.75f,ot , 0.75f,tt ,
	1,ot , 1,tt,
	0,ot , 0,tt ,
	0.25f,0 , 0.25f,ot ,
	0.25f,tt , 0.25f,1 
);

float V[8 * 3] = float[](
	-1,-1,+1,
	+1,-1,+1,
	-1,+1,+1,
	+1,+1,+1,
	-1,-1,-1,
	+1,-1,-1,
	-1,+1,-1,
	+1,+1,-1
);

float colors_for_cube[] = float[](
	1.0f, 0.0f, 0.0f,
	0.0f, 1.0f, 0.0f,
	0.0f, 0.0f, 1.0f, 
	1.0f, 0.0f, 1.0f,
	1.0f, 0.0f, 0.0f,
	0.0f, 1.0f, 0.0f,
	0.0f, 0.0f, 1.0f, 
	1.0f, 0.0f, 1.0f
);

float colors_for_cube_1[] = float[](
	1.0f, 0.0f, 0.0f,
	1.0f, 0.0f, 0.0f,
	1.0f, 0.0f, 0.0f,
	1.0f, 0.0f, 0.0f,
	0.0f, 1.0f, 0.0f,
	0.0f, 1.0f, 0.0f,
	0.0f, 1.0f, 0.0f,
	0.0f, 1.0f, 0.0f
);

void main()
{
    gl_Position = get_modelview_projection_matrix()*position;
    vec4 hp = get_modelview_matrix()*position;
    p_eye = hp.xyz / hp.w;
    n_eye = get_normal_matrix() * normal;
    tc    = texcoord;

	if(position.xyz == vec3(V[0],V[1],V[2])){
		col = vec3(colors_for_cube_1[0], colors_for_cube_1[1], colors_for_cube_1[2]);
	}else if(position.xyz == vec3(V[3 * 1],V[3 * 1 + 1],V[3 * 1 + 2])){
		col = vec3(colors_for_cube_1[3 * 1], colors_for_cube_1[1 + 3 * 1], colors_for_cube_1[2 + 3 * 1]);
	}else if(position.xyz == vec3(V[3 * 2],V[3 * 2 + 1],V[3 * 2 + 2])){
		col = vec3(colors_for_cube_1[3 * 2], colors_for_cube_1[1 + 3 * 2], colors_for_cube_1[2 + 3 * 2]);
	}else if(position.xyz == vec3(V[3 * 3],V[3 * 3 + 1],V[3 * 3 + 2])){
		col = vec3(colors_for_cube_1[3 * 3], colors_for_cube_1[1 + 3 * 3], colors_for_cube_1[2 + 3 * 3]);
	}
	else if(position.xyz == vec3(V[3 * 4],V[3 * 4 + 1],V[3 * 4 + 2])){
		col = vec3(colors_for_cube_1[3 * 4], colors_for_cube_1[1 + 3 * 4], colors_for_cube_1[2 + 3 * 4]);
	}else if(position.xyz == vec3(V[3 * 5],V[3 * 5 + 1],V[3 * 5 + 2])){
		col = vec3(colors_for_cube_1[3 * 5], colors_for_cube_1[1 + 3 * 5], colors_for_cube_1[2 + 3 * 5]);
	}else if(position.xyz == vec3(V[3 * 6],V[3 * 6 + 1],V[3 * 6 + 2])){
		col = vec3(colors_for_cube_1[3 * 6], colors_for_cube_1[1 + 3 * 6], colors_for_cube_1[2 + 3 * 6]);
	}else if(position.xyz == vec3(V[3 * 7],V[3 * 7 + 1],V[3 * 7 + 2])){
		col = vec3(colors_for_cube_1[3 * 7], colors_for_cube_1[1 + 3 * 7], colors_for_cube_1[2 + 3 * 7]);
	}
	else{
		col = vec3(1,1,1);
	}

	/*
	if(tc == vec2(T[0],T[1])){
		col = vec3(colors_for_cube_1[0], colors_for_cube_1[1], colors_for_cube_1[2]);
	}
	else if(tc == vec2(T[2 * 1],T[1 + 2 * 1])){
		col = vec3(colors_for_cube_1[3 * 1], colors_for_cube_1[1 + 3 * 1], colors_for_cube_1[2 + 3 * 1]);
	}
	else if(tc == vec2(T[2 * 2],T[1 + 2 * 2])){
		col = vec3(colors_for_cube_1[3 * 2], colors_for_cube_1[1 + 3 * 2], colors_for_cube_1[2 + 3 * 2]);
	}
	else if(tc == vec2(T[2 * 3],T[1 + 2 * 3])){
		col = vec3(colors_for_cube_1[3 * 3], colors_for_cube_1[1 + 3 * 3], colors_for_cube_1[2 + 3 * 3]);
	}

	// num 5 - 8
	else if(tc == vec2(T[2 * 4],T[1 + 2 * 4])){ // col5 = col1 
		col = vec3(colors_for_cube_1[0], colors_for_cube_1[1], colors_for_cube_1[2]);
	}
	else if(tc == vec2(T[2 * 5],T[1 + 2 * 5])){ // col6 = col4 
		col = vec3(colors_for_cube_1[3 * 3], colors_for_cube_1[1 + 3 * 3], colors_for_cube_1[2 + 3 * 3]);
	}
	else if(tc == vec2(T[2 * 6],T[1 + 2 * 6])){ // col7 = col11 = col9
		col = vec3(colors_for_cube_1[3 * 4], colors_for_cube_1[1 + 3 * 4], colors_for_cube_1[2 + 3 * 4]);
	}
	else if(tc == vec2(T[2 * 7],T[1 + 2 * 7])){ // col8 = col14 = col10 
		col = vec3(colors_for_cube_1[3 * 7], colors_for_cube_1[1 + 3 * 7], colors_for_cube_1[2 + 3 * 7]);
	}

	// num 9 - 10 
	else if(tc == vec2(T[2 * 8],T[1 + 2 * 8])){ // col9 = col11
		col = vec3(colors_for_cube_1[3 * 4], colors_for_cube_1[1 + 3 * 4], colors_for_cube_1[2 + 3 * 4]);
	}
	else if(tc == vec2(T[2 * 9],T[1 + 2 * 9])){ // col10 = col14 
		col = vec3(colors_for_cube_1[3 * 7], colors_for_cube_1[1 + 3 * 7], colors_for_cube_1[2 + 3 * 7]);
	}

	// num 11 - 14 
	else if(tc == vec2(T[2 * 10],T[1 + 2 * 10])){
		col = vec3(colors_for_cube_1[3 * 4], colors_for_cube_1[1 + 3 * 4], colors_for_cube_1[2 + 3 * 4]);
	}
	else if(tc == vec2(T[2 * 11],T[1 + 2 * 11])){
		col = vec3(colors_for_cube_1[3 * 5], colors_for_cube_1[1 + 3 * 5], colors_for_cube_1[2 + 3 * 5]);
	}
	else if(tc == vec2(T[2 * 12],T[1 + 2 * 12])){
		col = vec3(colors_for_cube_1[3 * 6], colors_for_cube_1[1 + 3 * 6], colors_for_cube_1[2 + 3 * 6]);
	}
	else if(tc == vec2(T[2 * 13],T[1 + 2 * 13])){
		col = vec3(colors_for_cube_1[3 * 7], colors_for_cube_1[1 + 3 * 7], colors_for_cube_1[2 + 3 * 7]);
	}
    //col   = color;
	else{
		col = vec3(1,1,1);
	}
	*/
}