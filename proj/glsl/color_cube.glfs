#version 150

uniform sampler2D tex;
uniform sampler2D img_tex;
uniform float ambient;
uniform bool show_tex;
uniform bool show_img_tex;

in vec3 p_eye;
in vec3 n_eye;
in vec3 col;
in vec2 tc;

out vec4 frag_color;

//***** begin interface of side.glsl ***********************************
bool keep_this_side(in vec3 position, in vec3 normal, out int side);
void update_material_color_and_transparency(inout vec3 mat_color, inout float transparency, in int side, in vec4 color);
void update_normal(inout vec3 normal, in int side);
//***** end interface of side.glsl ***********************************

vec4 compute_reflected_appearance(vec3 position_eye, vec3 normal_eye, vec4 color, int side);

vec4 my_color_transform(in vec4 c);

void main() 
{

	// julia, we need: 
	//    out_coordi(easy to have), 
	//    cVec(2d, para. can be fixed) , 
	//    fragment_color(4d, from vertex shader)
	int maxI = 200;
	float x,y;
	vec2 z = 1* tc;
	vec2 c = vec2(0.4,0.2);

	int i;
	for(i=0;i<maxI;i++){ // i was used as threshold, not directly given to the result val. 
		x = (z.x*z.x-z.y*z.y) + c.x; 
		y = (z.y*z.x+z.x*z.y) + c.y;
		if(x*x+y*y>4.0)
			break;
		z.x=x;
		z.y=y;
	}
	float alpha=1.0;
	if(i<maxI)
		alpha=float(i)/float(maxI);

		//color = 
		//vec4(1.0);
		//vec4(alpha,alpha,alpha,alpha)*10*fragment_color;
		//frag_color = col;
    frag_color = vec4(alpha,alpha,alpha,alpha)*10*vec4(tc,1,0);
	frag_color = vec4(frag_color.xyz,0.5);
	//frag_color = vec4(55.0f / 255.0f, 190.0f / 255.0f, 240.0f / 255.0f,0.4);
	//frag_color = vec4(tc, 1, 0.5); // acceptable effect!
	//frag_color = vec4(col, 0.5);
}